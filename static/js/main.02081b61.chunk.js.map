{"version":3,"sources":["components/PlaylistRow/PlaylistRow.module.scss","components/CombinedPlaylist/CombinedPlaylist.module.scss","components/PlaylistRow/PlaylistRow.tsx","components/CombinedPlaylist/CombinedPlaylist.tsx","services/SpotifyService.ts","components/PlaylistCombiner/PlaylistCombiner.tsx","serviceWorker.ts","index.tsx","components/PlaylistCombiner/PlaylistCombiner.module.scss"],"names":["module","exports","PlaylistRow","props","state","isChecked","playlist","this","className","styles","playlistRow","leftWrapper","type","checked","onChange","e","handleChange","src","images","length","url","alt","height","width","textWrapper","name","subInfo","owner","display_name","tracks","total","handelSelectedPlaylists","setState","prevState","target","React","PureComponent","CombinedPlaylist","nextProps","forceUpdate","playlists","spotifyService","combinedPlaylist","hidden","placeholder","value","map","key","onClick","createCombinedPlaylist","disabled","SpotifyService","spotifyApi","userId","a","createPlaylist","description","p","toString","res","getUniqueTracks","trackUris","track","uri","addTracks","id","playlistId","filter","includes","i","chunk","slice","addTracksToPlaylist","tracksRes","getPlaylistTracks","concat","tr","tracksFiltered","item","index","self","findIndex","getPlaylistsRecursive","offset","getUserPlaylists","limit","items","getPlaylistTracksRecursive","access_token","Spotify","setAccessToken","getMe","userResponse","PlaylistCombiner","selectedPlaylists","push","splice","indexOf","getHashParams","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","isLoggedin","params","create","getPlaylists","playlistCombiner","horWraper","playlistRows","toLowerCase","loginButton","href","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02081b61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"playlistRow\":\"PlaylistRow_playlistRow__o8p6w\",\"leftWrapper\":\"PlaylistRow_leftWrapper__18Ymn\",\"textWrapper\":\"PlaylistRow_textWrapper__raaQx\",\"subInfo\":\"PlaylistRow_subInfo__3CISa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"combinedPlaylist\":\"CombinedPlaylist_combinedPlaylist__3I4Dw\",\"hidden\":\"CombinedPlaylist_hidden__7alkj\"};","import React from \"react\";\n\nimport styles from \"./PlaylistRow.module.scss\";\n\nexport interface IPlaylistRowProps {\n  playlist: SpotifyApi.PlaylistObjectSimplified;\n  handelSelectedPlaylists(\n    playlist: SpotifyApi.PlaylistObjectSimplified,\n    isChecked: boolean\n  );\n}\n\nexport interface IPlaylistRowState {\n  isChecked: boolean;\n}\n\nexport default class PlaylistRow extends React.PureComponent<\n  IPlaylistRowProps,\n  IPlaylistRowState\n> {\n  constructor(props) {\n    super(props);\n    this.state = { isChecked: false };\n  }\n\n  public render() {\n    const { playlist } = this.props;\n    const { isChecked } = this.state;\n    return (\n      <div className={styles.playlistRow}>\n        <div className={styles.leftWrapper}>\n          <input\n            type=\"checkbox\"\n            checked={isChecked}\n            onChange={e => this.handleChange(e)}\n          />\n          <img\n            src={\n              playlist.images[playlist.images.length - 1] &&\n              playlist.images[playlist.images.length - 1].url\n            }\n            alt=\"cover\"\n            height={60}\n            width={60}\n          ></img>\n          <div className={styles.textWrapper}>\n            <h5>{playlist.name}</h5>\n            <div className={styles.subInfo}>\n              <p>By {playlist.owner.display_name} </p>\n              <p>{playlist.tracks.total} tracks</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const { handelSelectedPlaylists, playlist } = this.props;\n    this.setState(prevState => ({\n      ...prevState,\n      isChecked: !prevState.isChecked\n    }));\n    handelSelectedPlaylists(playlist, e.target.checked);\n  }\n}\n","import React from \"react\";\nimport ISpotifyService from \"../../services/ISpotifyService\";\n\nimport styles from \"./CombinedPlaylist.module.scss\";\n\nexport interface ICombinedPlaylistProps {\n  playlists: SpotifyApi.PlaylistObjectSimplified[];\n  spotifyService: ISpotifyService;\n}\n\nexport interface ICombinedPlaylistState {\n  name: string;\n}\n\nexport default class CombinedPlaylist extends React.PureComponent<\n  ICombinedPlaylistProps,\n  ICombinedPlaylistState\n> {\n  constructor(props) {\n    super(props);\n    this.state = { name: \"\" };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.forceUpdate();\n  }\n\n  public render() {\n    const { playlists, spotifyService } = this.props;\n    const { name } = this.state;\n    return (\n      <div\n        className={\n          playlists.length > 0 ? styles.combinedPlaylist : styles.hidden\n        }\n      >\n        <b>Name of the combined playlist:</b>\n        <input\n          type=\"text\"\n          placeholder=\"Playlist name\"\n          value={name}\n          onChange={e => {\n            const name = e.target.value;\n            this.setState(prevState => ({\n              ...prevState,\n              name\n            }));\n          }}\n        />\n        <p>Selected playlists:</p>\n        <ul>\n          {playlists &&\n            playlists.map((playlist, key) => (\n              <li key={key}>{playlist.name}</li>\n            ))}\n        </ul>\n        <button\n          onClick={() => spotifyService.createCombinedPlaylist(playlists, name)}\n          disabled={!name}\n        >\n          Create combined playlist\n        </button>\n      </div>\n    );\n  }\n}\n","import Spotify from \"spotify-web-api-js\";\nimport ISpotifyService from \"./ISpotifyService\";\n\nexport default class SpotifyService implements ISpotifyService {\n  private spotifyApi!: Spotify.SpotifyWebApiJs;\n  private userId!: string;\n\n  public static async create(access_token: string): Promise<ISpotifyService> {\n    const spotifyService = new SpotifyService();\n    spotifyService.spotifyApi = new Spotify();\n    spotifyService.spotifyApi.setAccessToken(access_token);\n    const userResponse = await spotifyService.spotifyApi.getMe();\n    spotifyService.userId = userResponse.id;\n    return spotifyService;\n  }\n\n  public async getPlaylists(): Promise<SpotifyApi.PlaylistObjectSimplified[]> {\n    const getPlaylistsRecursive = async (\n      offset: number\n    ): Promise<SpotifyApi.PlaylistObjectSimplified[]> => {\n      const res = await this.spotifyApi.getUserPlaylists(this.userId, {\n        limit: 50,\n        offset\n      });\n      return res.items.length < 50\n        ? res.items\n        : res.items.concat(await getPlaylistsRecursive(offset + 50));\n    };\n    const playlists = await getPlaylistsRecursive(0);\n    return playlists;\n  }\n\n  public createCombinedPlaylist = async (\n    playlists: SpotifyApi.PlaylistObjectSimplified[],\n    name: string\n  ): Promise<void> => {\n    const res = await this.spotifyApi.createPlaylist(this.userId, {\n      name,\n      description: `This playlist is a combination of:${playlists\n        .map(p => ` \"${p.name}\"`)\n        .toString()}`\n    });\n\n    const tracks = await this.getUniqueTracks(playlists);\n    const trackUris = tracks.map(track => track.uri);\n\n    await this.addTracks(res.id, trackUris);\n  };\n\n  private addTracks = async (\n    playlistId: string,\n    trackUris: string[]\n  ): Promise<any> => {\n    trackUris = trackUris.filter(uri => !uri.includes('local')); // Ignore local tracks\n    for (let i = 0; i < trackUris.length / 99; i++) {\n      let chunk = trackUris.slice(i * 99, (i + 1) * 99);\n      await this.spotifyApi.addTracksToPlaylist(playlistId, chunk);\n    }\n  };\n\n  private async getPlaylistTracks(\n    playlist: SpotifyApi.PlaylistObjectSimplified\n  ): Promise<SpotifyApi.PlaylistTrackObject[]> {\n    const getPlaylistTracksRecursive = async (\n      playlist: SpotifyApi.PlaylistObjectSimplified,\n      offset: number\n    ): Promise<SpotifyApi.PlaylistTrackObject[]> => {\n      const res = await this.spotifyApi.getPlaylistTracks(playlist.id, {\n        offset,\n        limit: 100\n      });\n      return res.items.length < 100\n        ? res.items\n        : res.items.concat(\n          await getPlaylistTracksRecursive(playlist, offset + 100)\n        );\n    };\n    const tracks = await getPlaylistTracksRecursive(playlist, 0);\n    return tracks;\n  }\n\n  private getUniqueTracks = async (\n    playlists: SpotifyApi.PlaylistObjectSimplified[]\n  ): Promise<SpotifyApi.TrackObjectFull[]> => {\n    let tracksRes: SpotifyApi.PlaylistTrackObject[] = [];\n    for (let i = 0; i < playlists.length; i++) {\n      tracksRes = tracksRes.concat(await this.getPlaylistTracks(playlists[i]));\n    }\n    const tracks = tracksRes.map(tr => tr.track);\n    const tracksFiltered = tracks.filter(\n      (item, index, self) => self.findIndex(i => i.id === item.id) === index\n    );\n    return tracksFiltered;\n  };\n}\n","import React from \"react\";\n\nimport PlaylistRow from \"../PlaylistRow/PlaylistRow\";\nimport CombinedPlaylist from \"../CombinedPlaylist/CombinedPlaylist\";\nimport ISpotifyService from \"../../services/ISpotifyService\";\nimport SpotifyService from \"../../services/SpotifyService\";\n\nimport styles from \"./PlaylistCombiner.module.scss\";\n\nexport interface IPlaylistCombinerState {\n  isLoggedin: boolean;\n  playlists: SpotifyApi.PlaylistObjectSimplified[];\n  selectedPlaylists: SpotifyApi.PlaylistObjectSimplified[];\n  filter: string;\n}\n\nexport default class PlaylistCombiner extends React.PureComponent<\n  {},\n  IPlaylistCombinerState\n> {\n  private spotifyService: ISpotifyService;\n\n  constructor() {\n    super({});\n\n    const params = this.getHashParams();\n    const isLoggedin = params.access_token && true;\n\n    this.state = {\n      isLoggedin,\n      playlists: [],\n      selectedPlaylists: [],\n      filter: \"\"\n    };\n  }\n\n  public async componentDidMount() {\n    const params = this.getHashParams();\n    if (params.access_token) {\n      this.spotifyService = await SpotifyService.create(params.access_token);\n      const playlists = await this.spotifyService.getPlaylists();\n      this.setState(prevState => ({\n        ...prevState,\n        isLoggedin: true,\n        playlists\n      }));\n    }\n  }\n\n  public render() {\n    const { isLoggedin, playlists, selectedPlaylists, filter } = this.state;\n\n    if (isLoggedin) {\n      return (\n        <div className={styles.playlistCombiner}>\n          <h1>Spotify Playlist Combiner</h1>\n          <p>\n            This site allows you to create Spotify playlist by combining\n            playlists, which you are already following.\n          </p>\n          <div className={styles.horWraper}>\n            <div className={styles.playlistRows}>\n              <p>Select playlists you want to combine</p>\n              Filter:\n              {\n                <input\n                  type=\"text\"\n                  value={filter}\n                  onChange={e => {\n                    const filter = e.target.value;\n                    this.setState(prevState => ({\n                      ...prevState,\n                      filter\n                    }));\n                  }}\n                ></input>\n              }\n              {playlists\n                .filter(\n                  p =>\n                    p.name.toLowerCase().includes(filter.toLowerCase()) ||\n                    p.owner.display_name\n                      .toLowerCase()\n                      .includes(filter.toLowerCase())\n                )\n                .map((playlist, key) => (\n                  <PlaylistRow\n                    playlist={playlist}\n                    key={key}\n                    handelSelectedPlaylists={this.handelSelectedPlaylists}\n                  />\n                ))}\n            </div>\n            <CombinedPlaylist\n              playlists={selectedPlaylists}\n              spotifyService={this.spotifyService}\n            />\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className={styles.playlistCombiner}>\n          <h1>Spotify Playlist Combiner</h1>\n          <p>\n            This site allows you to create Spotify playlist by combining\n            playlists, which you are already following.\n          </p>\n          <a\n            className={styles.loginButton}\n            href={\"https://spotify-playlist-combiner-serv.herokuapp.com/login\"}\n          >\n            <button>Login with Spotify</button>\n          </a>\n        </div>\n      );\n    }\n  }\n\n  private handelSelectedPlaylists = (\n    playlist: SpotifyApi.PlaylistObjectSimplified,\n    isChecked: boolean\n  ) => {\n    const { selectedPlaylists: oldPlaylists } = this.state;\n\n    const selectedPlaylists = oldPlaylists;\n\n    isChecked\n      ? selectedPlaylists.push(playlist)\n      : selectedPlaylists.splice(selectedPlaylists.indexOf(playlist), 1);\n\n    this.setState(prevState => ({ ...prevState, selectedPlaylists }));\n    this.forceUpdate();\n  };\n\n  private getHashParams = () => {\n    var hashParams: { [index: string]: any } = {};\n    var e,\n      r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    while ((e = r.exec(q))) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport PlaylistCombiner from \"./components/PlaylistCombiner/PlaylistCombiner\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<PlaylistCombiner />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playlistCombiner\":\"PlaylistCombiner_playlistCombiner__ExKLk\",\"loginButton\":\"PlaylistCombiner_loginButton__2rRRL\",\"horWraper\":\"PlaylistCombiner_horWraper__2f34f\",\"playlistRows\":\"PlaylistCombiner_playlistRows__23_Bv\"};"],"sourceRoot":""}