{"version":3,"sources":["components/CombinedPlaylist/CombinedPlaylist.module.scss","components/PlaylistRow/PlaylistRow.tsx","components/CombinedPlaylist/CombinedPlaylist.tsx","services/SpotifyService.ts","components/PlaylistCombiner/PlaylistCombiner.tsx","serviceWorker.ts","index.tsx","components/PlaylistCombiner/PlaylistCombiner.module.scss","components/PlaylistRow/PlaylistRow.module.scss"],"names":["module","exports","PlaylistRow","this","props","playlist","isChecked","className","styles","playlistRow","leftWrapper","type","checked","onChange","e","handleChange","src","images","length","url","alt","height","width","textWrapper","name","subInfo","owner","display_name","tracks","total","handelSelectedPlaylists","target","React","PureComponent","CombinedPlaylist","onCreatePlaylistClick","a","spotifyService","playlists","clearSelection","state","createCombinedPlaylist","res","setState","prevState","showSuccessMsg","setTimeout","forceUpdate","combinedPlaylist","map","key","onClick","disabled","msg1","msg2","play","SpotifyService","spotifyApi","userId","createPlaylist","description","p","toString","getUniqueTracks","trackUris","track","uri","addTracks","id","context_uri","setShuffle","unfollowPlaylist","playlistId","filter","includes","i","chunk","slice","addTracksToPlaylist","tracksRes","getPlaylistTracks","concat","tr","tracksFiltered","item","index","self","findIndex","getPlaylistsRecursive","offset","getUserPlaylists","limit","items","getPlaylistTracksRecursive","access_token","Spotify","setAccessToken","getMe","userResponse","PlaylistCombiner","console","log","selectedPlaylists","push","splice","indexOf","getHashParams","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","isLoggedin","params","create","getPlaylists","playlistCombiner","horWraper","playlistRows","value","toLowerCase","loginButton","href","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c69a43c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"combinedPlaylist\":\"CombinedPlaylist_combinedPlaylist__3VJ18\",\"msg1\":\"CombinedPlaylist_msg1__3XAVY\",\"fadeInOut\":\"CombinedPlaylist_fadeInOut__RZAxt\",\"msg2\":\"CombinedPlaylist_msg2__2CDBE\"};","import React from \"react\";\r\n\r\nimport styles from \"./PlaylistRow.module.scss\";\r\n\r\nexport interface IPlaylistRowProps {\r\n  playlist: SpotifyApi.PlaylistObjectSimplified;\r\n  isChecked: boolean;\r\n  handelSelectedPlaylists(\r\n    playlist: SpotifyApi.PlaylistObjectSimplified,\r\n    isChecked: boolean\r\n  );\r\n}\r\n\r\n\r\nexport default class PlaylistRow extends React.PureComponent<IPlaylistRowProps> {\r\n\r\n  public render() {\r\n    const { playlist, isChecked } = this.props;\r\n    return (\r\n      <div className={styles.playlistRow}>\r\n        <div className={styles.leftWrapper}>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isChecked}\r\n            onChange={e => this.handleChange(e)}\r\n          />\r\n          <img\r\n            src={\r\n              playlist.images[playlist.images.length - 1] &&\r\n              playlist.images[playlist.images.length - 1].url\r\n            }\r\n            alt=\"cover\"\r\n            height={60}\r\n            width={60}\r\n          ></img>\r\n          <div className={styles.textWrapper}>\r\n            <h5>{playlist.name}</h5>\r\n            <div className={styles.subInfo}>\r\n              <p>By {playlist.owner.display_name} </p>\r\n              <p>{playlist.tracks.total} tracks</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\r\n    const { handelSelectedPlaylists, playlist } = this.props;\r\n    handelSelectedPlaylists(playlist, e.target.checked);\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ISpotifyService from \"../../services/ISpotifyService\";\r\n\r\nimport styles from \"./CombinedPlaylist.module.scss\";\r\nimport SpotifyService from \"../../services/SpotifyService\";\r\n\r\nexport interface ICombinedPlaylistProps {\r\n  playlists: SpotifyApi.PlaylistObjectSimplified[];\r\n  spotifyService: ISpotifyService;\r\n  clearSelection();\r\n}\r\n\r\nexport interface ICombinedPlaylistState {\r\n  name: string;\r\n  showSuccessMsg: boolean;\r\n  res: any;\r\n}\r\n\r\nexport default class CombinedPlaylist extends React.PureComponent<\r\n  ICombinedPlaylistProps,\r\n  ICombinedPlaylistState\r\n> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { name: \"\", showSuccessMsg: false, res: null };\r\n  }\r\n\r\n  componentWillReceiveProps() {\r\n    this.forceUpdate();\r\n  }\r\n\r\n  public render() {\r\n    const { playlists } = this.props;\r\n    const { name, showSuccessMsg } = this.state;\r\n    return (\r\n      <div className={styles.combinedPlaylist}>\r\n        <p>Selected playlists:</p>\r\n        <ul>\r\n          {playlists &&\r\n            playlists.map((playlist, key) => (\r\n              <li key={key}>{playlist.name}</li>\r\n            ))}\r\n        </ul>\r\n        <button\r\n          onClick={() => this.onCreatePlaylistClick()}\r\n          disabled={playlists.length === 0}\r\n        >\r\n          Create combined playlist\r\n        </button>\r\n        <h5 className={showSuccessMsg ? styles.msg1 : styles.msg2}>\r\n          Created Playlist!\r\n        </h5>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  async onPlayClick(): Promise<void> {\r\n    const { spotifyService } = this.props;\r\n    const { res } = this.state;\r\n\r\n    await spotifyService.play(res);\r\n  }\r\n\r\n  private onCreatePlaylistClick = async () => {\r\n    const { spotifyService, playlists, clearSelection } = this.props;\r\n    const { name } = this.state;\r\n\r\n    const res = await spotifyService.createCombinedPlaylist(playlists, name);\r\n    clearSelection();\r\n\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      res,\r\n      showSuccessMsg: true,\r\n      name: \"\",\r\n    }));\r\n    setTimeout(() => {\r\n      this.setState((prevState) => ({ ...prevState, showSuccessMsg: false }));\r\n    }, 2000);\r\n  };\r\n}\r\n","import Spotify from \"spotify-web-api-js\";\r\nimport ISpotifyService from \"./ISpotifyService\";\r\n\r\nexport default class SpotifyService implements ISpotifyService {\r\n  private spotifyApi!: Spotify.SpotifyWebApiJs;\r\n  private userId!: string;\r\n\r\n  public static async create(access_token: string): Promise<ISpotifyService> {\r\n    const spotifyService = new SpotifyService();\r\n    spotifyService.spotifyApi = new Spotify();\r\n    spotifyService.spotifyApi.setAccessToken(access_token);\r\n    const userResponse = await spotifyService.spotifyApi.getMe();\r\n    spotifyService.userId = userResponse.id;\r\n    return spotifyService;\r\n  }\r\n\r\n  public async getPlaylists(): Promise<SpotifyApi.PlaylistObjectSimplified[]> {\r\n    const getPlaylistsRecursive = async (\r\n      offset: number\r\n    ): Promise<SpotifyApi.PlaylistObjectSimplified[]> => {\r\n      const res = await this.spotifyApi.getUserPlaylists(this.userId, {\r\n        limit: 50,\r\n        offset,\r\n      });\r\n      return res.items.length < 50\r\n        ? res.items\r\n        : res.items.concat(await getPlaylistsRecursive(offset + 50));\r\n    };\r\n    const playlists = await getPlaylistsRecursive(0);\r\n    return playlists;\r\n  }\r\n\r\n  public createCombinedPlaylist = async (\r\n    playlists: SpotifyApi.PlaylistObjectSimplified[],\r\n    name: string\r\n  ): Promise<void> => {\r\n    const res = await this.spotifyApi.createPlaylist(this.userId, {\r\n      name: \"combined playlist\",\r\n      description: `This playlist is a combination of:${playlists\r\n        .map((p) => ` \"${p.name}\"`)\r\n        .toString()}`,\r\n    });\r\n\r\n    const tracks = await this.getUniqueTracks(playlists);\r\n    const trackUris = tracks.map((track) => track.uri);\r\n\r\n    await this.addTracks(res.id, trackUris);\r\n\r\n    await this.spotifyApi.play({ context_uri: res.uri });\r\n\r\n    await this.spotifyApi.setShuffle(true);\r\n\r\n    await this.spotifyApi.unfollowPlaylist(res.id);\r\n  };\r\n\r\n  public play = async (res: any) => {\r\n    await this.spotifyApi.play({ context_uri: res.uri });\r\n  };\r\n\r\n  private addTracks = async (\r\n    playlistId: string,\r\n    trackUris: string[]\r\n  ): Promise<any> => {\r\n    trackUris = trackUris.filter((uri) => !uri.includes(\"local\")); // Ignore local tracks\r\n    for (let i = 0; i < trackUris.length / 99; i++) {\r\n      let chunk = trackUris.slice(i * 99, (i + 1) * 99);\r\n      await this.spotifyApi.addTracksToPlaylist(playlistId, chunk);\r\n    }\r\n  };\r\n\r\n  private async getPlaylistTracks(\r\n    playlist: SpotifyApi.PlaylistObjectSimplified\r\n  ): Promise<SpotifyApi.PlaylistTrackObject[]> {\r\n    const getPlaylistTracksRecursive = async (\r\n      playlist: SpotifyApi.PlaylistObjectSimplified,\r\n      offset: number\r\n    ): Promise<SpotifyApi.PlaylistTrackObject[]> => {\r\n      const res = await this.spotifyApi.getPlaylistTracks(playlist.id, {\r\n        offset,\r\n        limit: 100,\r\n      });\r\n      return res.items.length < 100\r\n        ? res.items\r\n        : res.items.concat(\r\n            await getPlaylistTracksRecursive(playlist, offset + 100)\r\n          );\r\n    };\r\n    const tracks = await getPlaylistTracksRecursive(playlist, 0);\r\n    return tracks;\r\n  }\r\n\r\n  private getUniqueTracks = async (\r\n    playlists: SpotifyApi.PlaylistObjectSimplified[]\r\n  ): Promise<SpotifyApi.TrackObjectFull[]> => {\r\n    let tracksRes: SpotifyApi.PlaylistTrackObject[] = [];\r\n    for (let i = 0; i < playlists.length; i++) {\r\n      tracksRes = tracksRes.concat(await this.getPlaylistTracks(playlists[i]));\r\n    }\r\n    const tracks = tracksRes.map((tr) => tr.track);\r\n    const tracksFiltered = tracks.filter(\r\n      (item, index, self) => self.findIndex((i) => i.id === item.id) === index\r\n    );\r\n    return tracksFiltered;\r\n  };\r\n}\r\n","import React from \"react\";\r\n\r\nimport PlaylistRow from \"../PlaylistRow/PlaylistRow\";\r\nimport CombinedPlaylist from \"../CombinedPlaylist/CombinedPlaylist\";\r\nimport ISpotifyService from \"../../services/ISpotifyService\";\r\nimport SpotifyService from \"../../services/SpotifyService\";\r\n\r\nimport styles from \"./PlaylistCombiner.module.scss\";\r\n\r\nexport interface IPlaylistCombinerState {\r\n  isLoggedin: boolean;\r\n  playlists: SpotifyApi.PlaylistObjectSimplified[];\r\n  selectedPlaylists: SpotifyApi.PlaylistObjectSimplified[];\r\n  filter: string;\r\n}\r\n\r\nexport default class PlaylistCombiner extends React.PureComponent<\r\n  {},\r\n  IPlaylistCombinerState\r\n  > {\r\n  private spotifyService: ISpotifyService;\r\n\r\n  constructor() {\r\n    super({});\r\n\r\n    const params = this.getHashParams();\r\n    const isLoggedin = params.access_token && true;\r\n\r\n    this.state = {\r\n      isLoggedin,\r\n      playlists: [],\r\n      selectedPlaylists: [],\r\n      filter: \"\"\r\n    };\r\n  }\r\n\r\n  public async componentDidMount() {\r\n    const params = this.getHashParams();\r\n    if (params.access_token) {\r\n      this.spotifyService = await SpotifyService.create(params.access_token);\r\n      const playlists = await this.spotifyService.getPlaylists();\r\n      this.setState(prevState => ({\r\n        ...prevState,\r\n        isLoggedin: true,\r\n        playlists\r\n      }));\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { isLoggedin, playlists, selectedPlaylists, filter } = this.state;\r\n\r\n    if (isLoggedin) {\r\n      return (\r\n        <div className={styles.playlistCombiner}>\r\n          <h1>Spotify Playlist Combiner</h1>\r\n          <p>\r\n            This site allows you to create Spotify playlist by combining\r\n            playlists, which you are already following.\r\n          </p>\r\n          <div className={styles.horWraper}>\r\n            <div className={styles.playlistRows}>\r\n              <p>Select playlists you want to combine</p>\r\n              Filter:\r\n              {\r\n                <input\r\n                  type=\"text\"\r\n                  value={filter}\r\n                  onChange={e => {\r\n                    const filter = e.target.value;\r\n                    this.setState(prevState => ({\r\n                      ...prevState,\r\n                      filter\r\n                    }));\r\n                  }}\r\n                ></input>\r\n              }\r\n              {playlists.length > 0\r\n                ? playlists.filter(\r\n                  p =>\r\n                    p.name.toLowerCase().includes(filter.toLowerCase()) ||\r\n                    p.owner.display_name\r\n                      .toLowerCase()\r\n                      .includes(filter.toLowerCase())\r\n                )\r\n                  .map((playlist, key) => (\r\n                    <PlaylistRow\r\n                      playlist={playlist}\r\n                      key={key}\r\n                      isChecked={selectedPlaylists.includes(playlist)}\r\n                      handelSelectedPlaylists={this.handelSelectedPlaylists}\r\n                    />\r\n                  ))\r\n                : 'loading playlists...'}\r\n            </div>\r\n            <CombinedPlaylist\r\n              playlists={selectedPlaylists}\r\n              spotifyService={this.spotifyService}\r\n              clearSelection={this.clearSelection}\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className={styles.playlistCombiner}>\r\n          <h1>Spotify Playlist Combiner</h1>\r\n          <p>\r\n            This site allows you to create Spotify playlist by combining\r\n            playlists, which you are already following.\r\n          </p>\r\n          <a\r\n            className={styles.loginButton}\r\n            href={\"https://spotify-playlist-combiner-serv.herokuapp.com/login\"}\r\n          >\r\n            <button>Login with Spotify</button>\r\n          </a>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  private clearSelection = (): void => {\r\n    console.log(\"this.clearSelection\");\r\n    this.setState(prevState => ({\r\n      ...prevState,\r\n      selectedPlaylists: [],\r\n      filter: \"\"\r\n    }));\r\n  }\r\n\r\n  private handelSelectedPlaylists = (\r\n    playlist: SpotifyApi.PlaylistObjectSimplified,\r\n    isChecked: boolean\r\n  ) => {\r\n    const { selectedPlaylists: oldPlaylists } = this.state;\r\n\r\n    const selectedPlaylists = oldPlaylists;\r\n\r\n    isChecked\r\n      ? selectedPlaylists.push(playlist)\r\n      : selectedPlaylists.splice(selectedPlaylists.indexOf(playlist), 1);\r\n\r\n    this.setState(prevState => ({ ...prevState, selectedPlaylists }));\r\n    this.forceUpdate();\r\n  };\r\n\r\n  private getHashParams = () => {\r\n    var hashParams: { [index: string]: any } = {};\r\n    var e,\r\n      r = /([^&;=]+)=?([^&;]*)/g,\r\n      q = window.location.hash.substring(1);\r\n    while ((e = r.exec(q))) {\r\n      hashParams[e[1]] = decodeURIComponent(e[2]);\r\n    }\r\n    return hashParams;\r\n  };\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport PlaylistCombiner from \"./components/PlaylistCombiner/PlaylistCombiner\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<PlaylistCombiner />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playlistCombiner\":\"PlaylistCombiner_playlistCombiner__3jbQ4\",\"loginButton\":\"PlaylistCombiner_loginButton__2m6-3\",\"horWraper\":\"PlaylistCombiner_horWraper__3Rdfw\",\"playlistRows\":\"PlaylistCombiner_playlistRows__3ifCi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playlistRow\":\"PlaylistRow_playlistRow__HTNk4\",\"leftWrapper\":\"PlaylistRow_leftWrapper__1PlGK\",\"textWrapper\":\"PlaylistRow_textWrapper__JNwfu\",\"subInfo\":\"PlaylistRow_subInfo__132Cr\"};"],"sourceRoot":""}