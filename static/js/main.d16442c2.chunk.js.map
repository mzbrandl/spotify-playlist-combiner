{"version":3,"sources":["components/PlaylistRow/PlaylistRow.module.scss","components/CombinedPlaylist/CombinedPlaylist.module.scss","components/PlaylistRow/PlaylistRow.tsx","components/CombinedPlaylist/CombinedPlaylist.tsx","services/SpotifyService.ts","components/PlaylistCombiner/PlaylistCombiner.tsx","serviceWorker.ts","index.tsx","components/PlaylistCombiner/PlaylistCombiner.module.scss"],"names":["module","exports","PlaylistRow","props","state","isChecked","playlist","this","className","styles","playlistRow","leftWrapper","type","checked","onChange","e","handleChange","src","images","length","url","alt","height","width","textWrapper","name","subInfo","owner","display_name","tracks","total","handelSelectedPlaylists","setState","prevState","target","React","PureComponent","CombinedPlaylist","nextProps","forceUpdate","playlists","spotifyService","combinedPlaylist","hidden","placeholder","value","map","key","onClick","createCombinedPlaylist","disabled","SpotifyService","spotifyApi","userId","a","createPlaylist","description","p","toString","res","getUniqueTracks","trackUris","track","uri","addTracks","id","playlistId","i","chunk","slice","addTracksToPlaylist","tracksRes","getPlaylistTracks","concat","tr","tracksFiltered","filter","item","index","self","findIndex","getPlaylistsRecursive","offset","getUserPlaylists","limit","items","getPlaylistTracksRecursive","access_token","Spotify","setAccessToken","getMe","userResponse","PlaylistCombiner","selectedPlaylists","push","splice","indexOf","getHashParams","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","isLoggedin","params","create","getPlaylists","playlistCombiner","horWraper","playlistRows","toLowerCase","includes","loginButton","href","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d16442c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"playlistRow\":\"PlaylistRow_playlistRow__HTNk4\",\"leftWrapper\":\"PlaylistRow_leftWrapper__1PlGK\",\"textWrapper\":\"PlaylistRow_textWrapper__JNwfu\",\"subInfo\":\"PlaylistRow_subInfo__132Cr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"combinedPlaylist\":\"CombinedPlaylist_combinedPlaylist__3VJ18\",\"hidden\":\"CombinedPlaylist_hidden__3S86Q\"};","import React from \"react\";\r\n\r\nimport styles from \"./PlaylistRow.module.scss\";\r\n\r\nexport interface IPlaylistRowProps {\r\n  playlist: SpotifyApi.PlaylistObjectSimplified;\r\n  handelSelectedPlaylists(\r\n    playlist: SpotifyApi.PlaylistObjectSimplified,\r\n    isChecked: boolean\r\n  );\r\n}\r\n\r\nexport interface IPlaylistRowState {\r\n  isChecked: boolean;\r\n}\r\n\r\nexport default class PlaylistRow extends React.PureComponent<\r\n  IPlaylistRowProps,\r\n  IPlaylistRowState\r\n> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { isChecked: false };\r\n  }\r\n\r\n  public render() {\r\n    const { playlist } = this.props;\r\n    const { isChecked } = this.state;\r\n    return (\r\n      <div className={styles.playlistRow}>\r\n        <div className={styles.leftWrapper}>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isChecked}\r\n            onChange={e => this.handleChange(e)}\r\n          />\r\n          <img\r\n            src={\r\n              playlist.images[playlist.images.length - 1] &&\r\n              playlist.images[playlist.images.length - 1].url\r\n            }\r\n            alt=\"cover\"\r\n            height={60}\r\n            width={60}\r\n          ></img>\r\n          <div className={styles.textWrapper}>\r\n            <h5>{playlist.name}</h5>\r\n            <div className={styles.subInfo}>\r\n              <p>By {playlist.owner.display_name} </p>\r\n              <p>{playlist.tracks.total} tracks</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\r\n    const { handelSelectedPlaylists, playlist } = this.props;\r\n    this.setState(prevState => ({\r\n      ...prevState,\r\n      isChecked: !prevState.isChecked\r\n    }));\r\n    handelSelectedPlaylists(playlist, e.target.checked);\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ISpotifyService from \"../../services/ISpotifyService\";\r\n\r\nimport styles from \"./CombinedPlaylist.module.scss\";\r\n\r\nexport interface ICombinedPlaylistProps {\r\n  playlists: SpotifyApi.PlaylistObjectSimplified[];\r\n  spotifyService: ISpotifyService;\r\n}\r\n\r\nexport interface ICombinedPlaylistState {\r\n  name: string;\r\n}\r\n\r\nexport default class CombinedPlaylist extends React.PureComponent<\r\n  ICombinedPlaylistProps,\r\n  ICombinedPlaylistState\r\n> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { name: \"\" };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    this.forceUpdate();\r\n  }\r\n\r\n  public render() {\r\n    const { playlists, spotifyService } = this.props;\r\n    const { name } = this.state;\r\n    return (\r\n      <div\r\n        className={\r\n          playlists.length > 0 ? styles.combinedPlaylist : styles.hidden\r\n        }\r\n      >\r\n        <b>Name of the combined playlist:</b>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Playlist name\"\r\n          value={name}\r\n          onChange={e => {\r\n            const name = e.target.value;\r\n            this.setState(prevState => ({\r\n              ...prevState,\r\n              name\r\n            }));\r\n          }}\r\n        />\r\n        <p>Selected playlists:</p>\r\n        <ul>\r\n          {playlists &&\r\n            playlists.map((playlist, key) => (\r\n              <li key={key}>{playlist.name}</li>\r\n            ))}\r\n        </ul>\r\n        <button\r\n          onClick={() => spotifyService.createCombinedPlaylist(playlists, name)}\r\n          disabled={!name}\r\n        >\r\n          Create combined playlist\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Spotify from \"spotify-web-api-js\";\r\nimport ISpotifyService from \"./ISpotifyService\";\r\n\r\nexport default class SpotifyService implements ISpotifyService {\r\n  private spotifyApi!: Spotify.SpotifyWebApiJs;\r\n  private userId!: string;\r\n\r\n  public static async create(access_token: string): Promise<ISpotifyService> {\r\n    const spotifyService = new SpotifyService();\r\n    spotifyService.spotifyApi = new Spotify();\r\n    spotifyService.spotifyApi.setAccessToken(access_token);\r\n    const userResponse = await spotifyService.spotifyApi.getMe();\r\n    spotifyService.userId = userResponse.id;\r\n    return spotifyService;\r\n  }\r\n\r\n  public async getPlaylists(): Promise<SpotifyApi.PlaylistObjectSimplified[]> {\r\n    const getPlaylistsRecursive = async (\r\n      offset: number\r\n    ): Promise<SpotifyApi.PlaylistObjectSimplified[]> => {\r\n      const res = await this.spotifyApi.getUserPlaylists(this.userId, {\r\n        limit: 50,\r\n        offset\r\n      });\r\n      return res.items.length < 50\r\n        ? res.items\r\n        : res.items.concat(await getPlaylistsRecursive(offset + 50));\r\n    };\r\n    const playlists = await getPlaylistsRecursive(0);\r\n    return playlists;\r\n  }\r\n\r\n  public createCombinedPlaylist = async (\r\n    playlists: SpotifyApi.PlaylistObjectSimplified[],\r\n    name: string\r\n  ): Promise<void> => {\r\n    const res = await this.spotifyApi.createPlaylist(this.userId, {\r\n      name,\r\n      description: `This playlist is a combination of:${playlists\r\n        .map(p => ` \"${p.name}\"`)\r\n        .toString()}`\r\n    });\r\n\r\n    const tracks = await this.getUniqueTracks(playlists);\r\n    const trackUris = tracks.map(track => track.uri);\r\n\r\n    await this.addTracks(res.id, trackUris);\r\n  };\r\n\r\n  private addTracks = async (\r\n    playlistId: string,\r\n    trackUris: string[]\r\n  ): Promise<any> => {\r\n    for (let i = 0; i < trackUris.length / 99; i++) {\r\n      let chunk = trackUris.slice(i * 99, (i + 1) * 99);\r\n      await this.spotifyApi.addTracksToPlaylist(playlistId, chunk);\r\n    }\r\n  };\r\n\r\n  private async getPlaylistTracks(\r\n    playlist: SpotifyApi.PlaylistObjectSimplified\r\n  ): Promise<SpotifyApi.PlaylistTrackObject[]> {\r\n    const getPlaylistTracksRecursive = async (\r\n      playlist: SpotifyApi.PlaylistObjectSimplified,\r\n      offset: number\r\n    ): Promise<SpotifyApi.PlaylistTrackObject[]> => {\r\n      const res = await this.spotifyApi.getPlaylistTracks(playlist.id, {\r\n        offset,\r\n        limit: 100\r\n      });\r\n      return res.items.length < 100\r\n        ? res.items\r\n        : res.items.concat(\r\n            await getPlaylistTracksRecursive(playlist, offset + 100)\r\n          );\r\n    };\r\n    const tracks = await getPlaylistTracksRecursive(playlist, 0);\r\n    return tracks;\r\n  }\r\n\r\n  private getUniqueTracks = async (\r\n    playlists: SpotifyApi.PlaylistObjectSimplified[]\r\n  ): Promise<SpotifyApi.TrackObjectFull[]> => {\r\n    let tracksRes: SpotifyApi.PlaylistTrackObject[] = [];\r\n    for (let i = 0; i < playlists.length; i++) {\r\n      tracksRes = tracksRes.concat(await this.getPlaylistTracks(playlists[i]));\r\n    }\r\n    const tracks = tracksRes.map(tr => tr.track);\r\n    const tracksFiltered = tracks.filter(\r\n      (item, index, self) => self.findIndex(i => i.id === item.id) === index\r\n    );\r\n    return tracksFiltered;\r\n  };\r\n}\r\n","import React from \"react\";\n\nimport PlaylistRow from \"../PlaylistRow/PlaylistRow\";\nimport CombinedPlaylist from \"../CombinedPlaylist/CombinedPlaylist\";\nimport ISpotifyService from \"../../services/ISpotifyService\";\nimport SpotifyService from \"../../services/SpotifyService\";\n\nimport styles from \"./PlaylistCombiner.module.scss\";\n\nexport interface IPlaylistCombinerState {\n  isLoggedin: boolean;\n  playlists: SpotifyApi.PlaylistObjectSimplified[];\n  selectedPlaylists: SpotifyApi.PlaylistObjectSimplified[];\n  filter: string;\n}\n\nexport default class PlaylistCombiner extends React.PureComponent<\n  {},\n  IPlaylistCombinerState\n> {\n  private spotifyService: ISpotifyService;\n\n  constructor() {\n    super({});\n\n    const params = this.getHashParams();\n    const isLoggedin = params.access_token && true;\n\n    this.state = {\n      isLoggedin,\n      playlists: [],\n      selectedPlaylists: [],\n      filter: \"\"\n    };\n  }\n\n  public async componentDidMount() {\n    const params = this.getHashParams();\n    if (params.access_token) {\n      this.spotifyService = await SpotifyService.create(params.access_token);\n      const playlists = await this.spotifyService.getPlaylists();\n      this.setState(prevState => ({\n        ...prevState,\n        isLoggedin: true,\n        playlists\n      }));\n    }\n  }\n\n  public render() {\n    const { isLoggedin, playlists, selectedPlaylists, filter } = this.state;\n\n    if (isLoggedin) {\n      return (\n        <div className={styles.playlistCombiner}>\n          <h1>Spotify Playlist Combiner</h1>\n          <p>\n            This site allows you to create Spotify playlist by combining\n            playlists, which you are already following.\n          </p>\n          <div className={styles.horWraper}>\n            <div className={styles.playlistRows}>\n              <p>Select playlists you want to combine</p>\n              Filter:\n              {\n                <input\n                  type=\"text\"\n                  value={filter}\n                  onChange={e => {\n                    const filter = e.target.value;\n                    this.setState(prevState => ({\n                      ...prevState,\n                      filter\n                    }));\n                  }}\n                ></input>\n              }\n              {playlists\n                .filter(\n                  p =>\n                    p.name.toLowerCase().includes(filter.toLowerCase()) ||\n                    p.owner.display_name\n                      .toLowerCase()\n                      .includes(filter.toLowerCase())\n                )\n                .map((playlist, key) => (\n                  <PlaylistRow\n                    playlist={playlist}\n                    key={key}\n                    handelSelectedPlaylists={this.handelSelectedPlaylists}\n                  />\n                ))}\n            </div>\n            <CombinedPlaylist\n              playlists={selectedPlaylists}\n              spotifyService={this.spotifyService}\n            />\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className={styles.playlistCombiner}>\n          <h1>Spotify Playlist Combiner</h1>\n          <p>\n            This site allows you to create Spotify playlist by combining\n            playlists, which you are already following.\n          </p>\n          <a\n            className={styles.loginButton}\n            href={\"https://spotify-playlist-combiner-serv.herokuapp.com/login\"}\n          >\n            <button>Login with Spotify</button>\n          </a>\n        </div>\n      );\n    }\n  }\n\n  private handelSelectedPlaylists = (\n    playlist: SpotifyApi.PlaylistObjectSimplified,\n    isChecked: boolean\n  ) => {\n    const { selectedPlaylists: oldPlaylists } = this.state;\n\n    const selectedPlaylists = oldPlaylists;\n\n    isChecked\n      ? selectedPlaylists.push(playlist)\n      : selectedPlaylists.splice(selectedPlaylists.indexOf(playlist), 1);\n\n    this.setState(prevState => ({ ...prevState, selectedPlaylists }));\n    this.forceUpdate();\n  };\n\n  private getHashParams = () => {\n    var hashParams: { [index: string]: any } = {};\n    var e,\n      r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    while ((e = r.exec(q))) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport PlaylistCombiner from \"./components/PlaylistCombiner/PlaylistCombiner\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<PlaylistCombiner />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playlistCombiner\":\"PlaylistCombiner_playlistCombiner__3jbQ4\",\"loginButton\":\"PlaylistCombiner_loginButton__2m6-3\",\"horWraper\":\"PlaylistCombiner_horWraper__3Rdfw\",\"playlistRows\":\"PlaylistCombiner_playlistRows__3ifCi\"};"],"sourceRoot":""}