{"version":3,"sources":["components/CombinedPlaylist/CombinedPlaylist.module.scss","components/PlaylistRow/PlaylistRow.tsx","components/CombinedPlaylist/CombinedPlaylist.tsx","services/SpotifyService.ts","components/PlaylistCombiner/PlaylistCombiner.tsx","serviceWorker.ts","index.tsx","components/PlaylistCombiner/PlaylistCombiner.module.scss","components/PlaylistRow/PlaylistRow.module.scss"],"names":["module","exports","PlaylistRow","this","props","playlist","isChecked","className","styles","playlistRow","leftWrapper","type","checked","onChange","e","handleChange","src","images","length","url","alt","height","width","textWrapper","name","subInfo","owner","display_name","tracks","total","handelSelectedPlaylists","target","React","PureComponent","CombinedPlaylist","onCreatePlaylistClick","spotifyService","playlists","clearSelection","state","createCombinedPlaylist","setState","prevState","showSuccessMsg","setTimeout","forceUpdate","combinedPlaylist","placeholder","value","map","key","onClick","disabled","msg1","msg2","SpotifyService","spotifyApi","userId","a","createPlaylist","description","p","toString","res","getUniqueTracks","trackUris","track","uri","addTracks","id","playlistId","filter","includes","i","chunk","slice","addTracksToPlaylist","tracksRes","getPlaylistTracks","concat","tr","tracksFiltered","item","index","self","findIndex","getPlaylistsRecursive","offset","getUserPlaylists","limit","items","getPlaylistTracksRecursive","access_token","Spotify","setAccessToken","getMe","userResponse","PlaylistCombiner","console","log","selectedPlaylists","push","splice","indexOf","getHashParams","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","isLoggedin","params","create","getPlaylists","playlistCombiner","horWraper","playlistRows","toLowerCase","loginButton","href","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eaba6485.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"combinedPlaylist\":\"CombinedPlaylist_combinedPlaylist__3I4Dw\",\"msg1\":\"CombinedPlaylist_msg1__dptA-\",\"fadeInOut\":\"CombinedPlaylist_fadeInOut__7Pg1b\",\"msg2\":\"CombinedPlaylist_msg2__m1jtg\"};","import React from \"react\";\n\nimport styles from \"./PlaylistRow.module.scss\";\n\nexport interface IPlaylistRowProps {\n  playlist: SpotifyApi.PlaylistObjectSimplified;\n  isChecked: boolean;\n  handelSelectedPlaylists(\n    playlist: SpotifyApi.PlaylistObjectSimplified,\n    isChecked: boolean\n  );\n}\n\n\nexport default class PlaylistRow extends React.PureComponent<IPlaylistRowProps> {\n\n  public render() {\n    const { playlist, isChecked } = this.props;\n    return (\n      <div className={styles.playlistRow}>\n        <div className={styles.leftWrapper}>\n          <input\n            type=\"checkbox\"\n            checked={isChecked}\n            onChange={e => this.handleChange(e)}\n          />\n          <img\n            src={\n              playlist.images[playlist.images.length - 1] &&\n              playlist.images[playlist.images.length - 1].url\n            }\n            alt=\"cover\"\n            height={60}\n            width={60}\n          ></img>\n          <div className={styles.textWrapper}>\n            <h5>{playlist.name}</h5>\n            <div className={styles.subInfo}>\n              <p>By {playlist.owner.display_name} </p>\n              <p>{playlist.tracks.total} tracks</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const { handelSelectedPlaylists, playlist } = this.props;\n    handelSelectedPlaylists(playlist, e.target.checked);\n  }\n}\n","import React from \"react\";\nimport ISpotifyService from \"../../services/ISpotifyService\";\n\nimport styles from \"./CombinedPlaylist.module.scss\";\n\nexport interface ICombinedPlaylistProps {\n  playlists: SpotifyApi.PlaylistObjectSimplified[];\n  spotifyService: ISpotifyService;\n  clearSelection();\n}\n\nexport interface ICombinedPlaylistState {\n  name: string;\n  showSuccessMsg: boolean;\n}\n\nexport default class CombinedPlaylist extends React.PureComponent<\n  ICombinedPlaylistProps,\n  ICombinedPlaylistState\n  > {\n  constructor(props) {\n    super(props);\n    this.state = { name: \"\", showSuccessMsg: false };\n  }\n\n  componentWillReceiveProps() {\n    this.forceUpdate();\n  }\n\n  public render() {\n    const { playlists } = this.props;\n    const { name, showSuccessMsg } = this.state;\n    return (\n      <div className={styles.combinedPlaylist}>\n        <b>Name of the combined playlist:</b>\n        <input\n          type=\"text\"\n          placeholder=\"Playlist name\"\n          value={name}\n          onChange={e => {\n            const name = e.target.value;\n            this.setState(prevState => ({\n              ...prevState,\n              name\n            }));\n          }}\n        />\n        <p>Selected playlists:</p>\n        <ul>\n          {playlists &&\n            playlists.map((playlist, key) => (\n              <li key={key}>{playlist.name}</li>\n            ))}\n        </ul>\n        <button\n          onClick={() => this.onCreatePlaylistClick()}\n          disabled={!name || playlists.length === 0}\n        >\n          Create combined playlist\n        </button>\n        <h5 className={showSuccessMsg ? styles.msg1 : styles.msg2}>Created Playlist!</h5>\n      </div>\n    );\n  }\n\n  private onCreatePlaylistClick = () => {\n    const { spotifyService, playlists, clearSelection } = this.props;\n    const { name } = this.state;\n\n    spotifyService.createCombinedPlaylist(playlists, name);\n    clearSelection();\n\n    this.setState(prevState => ({\n      ...prevState,\n      showSuccessMsg: true,\n      name: \"\"\n    }));\n    setTimeout(() => {\n      this.setState(prevState => ({ ...prevState, showSuccessMsg: false }))\n    }, 2000)\n  }\n}\n","import Spotify from \"spotify-web-api-js\";\nimport ISpotifyService from \"./ISpotifyService\";\n\nexport default class SpotifyService implements ISpotifyService {\n  private spotifyApi!: Spotify.SpotifyWebApiJs;\n  private userId!: string;\n\n  public static async create(access_token: string): Promise<ISpotifyService> {\n    const spotifyService = new SpotifyService();\n    spotifyService.spotifyApi = new Spotify();\n    spotifyService.spotifyApi.setAccessToken(access_token);\n    const userResponse = await spotifyService.spotifyApi.getMe();\n    spotifyService.userId = userResponse.id;\n    return spotifyService;\n  }\n\n  public async getPlaylists(): Promise<SpotifyApi.PlaylistObjectSimplified[]> {\n    const getPlaylistsRecursive = async (\n      offset: number\n    ): Promise<SpotifyApi.PlaylistObjectSimplified[]> => {\n      const res = await this.spotifyApi.getUserPlaylists(this.userId, {\n        limit: 50,\n        offset\n      });\n      return res.items.length < 50\n        ? res.items\n        : res.items.concat(await getPlaylistsRecursive(offset + 50));\n    };\n    const playlists = await getPlaylistsRecursive(0);\n    return playlists;\n  }\n\n  public createCombinedPlaylist = async (\n    playlists: SpotifyApi.PlaylistObjectSimplified[],\n    name: string\n  ): Promise<void> => {\n    const res = await this.spotifyApi.createPlaylist(this.userId, {\n      name,\n      description: `This playlist is a combination of:${playlists\n        .map(p => ` \"${p.name}\"`)\n        .toString()}`\n    });\n\n    const tracks = await this.getUniqueTracks(playlists);\n    const trackUris = tracks.map(track => track.uri);\n\n    await this.addTracks(res.id, trackUris);\n  };\n\n  private addTracks = async (\n    playlistId: string,\n    trackUris: string[]\n  ): Promise<any> => {\n    trackUris = trackUris.filter(uri => !uri.includes('local')); // Ignore local tracks\n    for (let i = 0; i < trackUris.length / 99; i++) {\n      let chunk = trackUris.slice(i * 99, (i + 1) * 99);\n      await this.spotifyApi.addTracksToPlaylist(playlistId, chunk);\n    }\n  };\n\n  private async getPlaylistTracks(\n    playlist: SpotifyApi.PlaylistObjectSimplified\n  ): Promise<SpotifyApi.PlaylistTrackObject[]> {\n    const getPlaylistTracksRecursive = async (\n      playlist: SpotifyApi.PlaylistObjectSimplified,\n      offset: number\n    ): Promise<SpotifyApi.PlaylistTrackObject[]> => {\n      const res = await this.spotifyApi.getPlaylistTracks(playlist.id, {\n        offset,\n        limit: 100\n      });\n      return res.items.length < 100\n        ? res.items\n        : res.items.concat(\n          await getPlaylistTracksRecursive(playlist, offset + 100)\n        );\n    };\n    const tracks = await getPlaylistTracksRecursive(playlist, 0);\n    return tracks;\n  }\n\n  private getUniqueTracks = async (\n    playlists: SpotifyApi.PlaylistObjectSimplified[]\n  ): Promise<SpotifyApi.TrackObjectFull[]> => {\n    let tracksRes: SpotifyApi.PlaylistTrackObject[] = [];\n    for (let i = 0; i < playlists.length; i++) {\n      tracksRes = tracksRes.concat(await this.getPlaylistTracks(playlists[i]));\n    }\n    const tracks = tracksRes.map(tr => tr.track);\n    const tracksFiltered = tracks.filter(\n      (item, index, self) => self.findIndex(i => i.id === item.id) === index\n    );\n    return tracksFiltered;\n  };\n}\n","import React from \"react\";\n\nimport PlaylistRow from \"../PlaylistRow/PlaylistRow\";\nimport CombinedPlaylist from \"../CombinedPlaylist/CombinedPlaylist\";\nimport ISpotifyService from \"../../services/ISpotifyService\";\nimport SpotifyService from \"../../services/SpotifyService\";\n\nimport styles from \"./PlaylistCombiner.module.scss\";\n\nexport interface IPlaylistCombinerState {\n  isLoggedin: boolean;\n  playlists: SpotifyApi.PlaylistObjectSimplified[];\n  selectedPlaylists: SpotifyApi.PlaylistObjectSimplified[];\n  filter: string;\n}\n\nexport default class PlaylistCombiner extends React.PureComponent<\n  {},\n  IPlaylistCombinerState\n  > {\n  private spotifyService: ISpotifyService;\n\n  constructor() {\n    super({});\n\n    const params = this.getHashParams();\n    const isLoggedin = params.access_token && true;\n\n    this.state = {\n      isLoggedin,\n      playlists: [],\n      selectedPlaylists: [],\n      filter: \"\"\n    };\n  }\n\n  public async componentDidMount() {\n    const params = this.getHashParams();\n    if (params.access_token) {\n      this.spotifyService = await SpotifyService.create(params.access_token);\n      const playlists = await this.spotifyService.getPlaylists();\n      this.setState(prevState => ({\n        ...prevState,\n        isLoggedin: true,\n        playlists\n      }));\n    }\n  }\n\n  public render() {\n    const { isLoggedin, playlists, selectedPlaylists, filter } = this.state;\n\n    if (isLoggedin) {\n      return (\n        <div className={styles.playlistCombiner}>\n          <h1>Spotify Playlist Combiner</h1>\n          <p>\n            This site allows you to create Spotify playlist by combining\n            playlists, which you are already following.\n          </p>\n          <div className={styles.horWraper}>\n            <div className={styles.playlistRows}>\n              <p>Select playlists you want to combine</p>\n              Filter:\n              {\n                <input\n                  type=\"text\"\n                  value={filter}\n                  onChange={e => {\n                    const filter = e.target.value;\n                    this.setState(prevState => ({\n                      ...prevState,\n                      filter\n                    }));\n                  }}\n                ></input>\n              }\n              {playlists.length > 0\n                ? playlists.filter(\n                  p =>\n                    p.name.toLowerCase().includes(filter.toLowerCase()) ||\n                    p.owner.display_name\n                      .toLowerCase()\n                      .includes(filter.toLowerCase())\n                )\n                  .map((playlist, key) => (\n                    <PlaylistRow\n                      playlist={playlist}\n                      key={key}\n                      isChecked={selectedPlaylists.includes(playlist)}\n                      handelSelectedPlaylists={this.handelSelectedPlaylists}\n                    />\n                  ))\n                : 'loading playlists...'}\n            </div>\n            <CombinedPlaylist\n              playlists={selectedPlaylists}\n              spotifyService={this.spotifyService}\n              clearSelection={this.clearSelection}\n            />\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className={styles.playlistCombiner}>\n          <h1>Spotify Playlist Combiner</h1>\n          <p>\n            This site allows you to create Spotify playlist by combining\n            playlists, which you are already following.\n          </p>\n          <a\n            className={styles.loginButton}\n            href={\"https://spotify-playlist-combiner-serv.herokuapp.com/login\"}\n          >\n            <button>Login with Spotify</button>\n          </a>\n        </div>\n      );\n    }\n  }\n\n  private clearSelection = (): void => {\n    console.log(\"this.clearSelection\");\n    this.setState(prevState => ({\n      ...prevState,\n      selectedPlaylists: [],\n      filter: \"\"\n    }));\n  }\n\n  private handelSelectedPlaylists = (\n    playlist: SpotifyApi.PlaylistObjectSimplified,\n    isChecked: boolean\n  ) => {\n    const { selectedPlaylists: oldPlaylists } = this.state;\n\n    const selectedPlaylists = oldPlaylists;\n\n    isChecked\n      ? selectedPlaylists.push(playlist)\n      : selectedPlaylists.splice(selectedPlaylists.indexOf(playlist), 1);\n\n    this.setState(prevState => ({ ...prevState, selectedPlaylists }));\n    this.forceUpdate();\n  };\n\n  private getHashParams = () => {\n    var hashParams: { [index: string]: any } = {};\n    var e,\n      r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    while ((e = r.exec(q))) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport PlaylistCombiner from \"./components/PlaylistCombiner/PlaylistCombiner\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<PlaylistCombiner />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playlistCombiner\":\"PlaylistCombiner_playlistCombiner__ExKLk\",\"loginButton\":\"PlaylistCombiner_loginButton__2rRRL\",\"horWraper\":\"PlaylistCombiner_horWraper__2f34f\",\"playlistRows\":\"PlaylistCombiner_playlistRows__23_Bv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playlistRow\":\"PlaylistRow_playlistRow__o8p6w\",\"leftWrapper\":\"PlaylistRow_leftWrapper__18Ymn\",\"textWrapper\":\"PlaylistRow_textWrapper__raaQx\",\"subInfo\":\"PlaylistRow_subInfo__3CISa\"};"],"sourceRoot":""}